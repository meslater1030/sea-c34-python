# add a list of lists
# donation amount and date
# add first name and last



'''The pseudo code breaks up the mailroom task into three main function a few extra
functions. Menu, send a report , and create a report. There are a few extra
functions like print a report that are separate functions but they are not the
main of the program'''


‘’’We should have a data structure that holds a list of your donors and a history of the amounts they have donated. This structure should be populated at first with at least five donors, with between 1 and 3 donations each’’’


donor_info = {"Doug Peters": 150,"Gene Simmons": 1000, "Julie Andrews": 500, "Guy Ritchie": 0, "Paul Allen": 0, "Paul Allen": 5000, "Paul Allen": 500, "Doug Peters": 100, "Doug Peters": 250, "Gene Simmons": 1000, "Gene Simmons": 1000,}



#create a main menu(1 or 2):
‘’’deploy 2 functions or an exit ‘’’


    def main_menu():

    Print " Welcome to Mailroom Madness"
    print "Please enter a suggestion below:"
    print "Enter 1 to send a thank you letter"
    print "Enter 2 to create a report"
    print "\n0. Quit"

    suggestion= enter raw_input ( either 1, 2, otherwise quit)

    exec_menu(choice)

    return

# Lets define a function that handles our menu selections

    def exec_menu(choice):
    ch = choice.lower()
    if ch == '':
        menu_actions['main_menu']()
    else:
        try:
            menu_actions[ch]()
        except KeyError:
            print "Invalid selection, please try again.\n"
            menu_actions['main_menu']()
    return

    def back():
        menu_actions['main_menu']()

    # Exit program
    def exit():
        sys.exit()

    def send_a_thankyou(option):

        print "Sending a thank you program.
        Type 'list': to see a list of current donors
        Type 'new' to enter the full name of the donor and donation amount
        Type 'update' add an additional donation to existing member the command prompt below"
        print "9. Back"
        print "0. Quit"
        choice = raw_input(" >>  ")
        exec_menu(choice)
        return


        name = ''
        donation_amount = ''

        if option == 'list':
            print donor_info.keys()
            #return to main menu
        main menu()

    # If the name is not in the key and the user entered a name add it to the donor
    # info along with donation amount

        if option == 'new':

            if donor_info.has_key(name) and len(name) > 0:
                print "This is not a new donor . returning to menu with update"

                send_a_thankyou('update')
            else:
                print "Enter new donors name:"
                name = raw_input()
                print "Enter donation amount:"
                donation_amount = float(raw_input())
                # float(donation_amount) = donation_amount
                donor_info[name] = donation_amount
                print " Your information has been recorded"
                print_thank_you(name, donation_amount)

        if option == 'update':
            print "Enter new donors name:"
            name = raw_input()
        # If the user wants to add another donation from someone already in the system
        if not donor_info.has_key(name) and len(name) > 0:
            print "This donor is not in the system try again"
            send_a_thankyou('new')

        if len(name) or len(donation_amount) == 0:
            print "Please enter a name and donation amount. Try again"
            send_a_thankyou('')
        else:
            print "Enter donation amount:"
            donation_amount = float(raw_input())

        # Add donation amount to Donor_info dictionary
        if donation_amount.isdigit():
            insert_dict = {name: donation_amount}
            donor_info.update(insert_dict)
        else:
            print " the value you entered is not a number. try again"
            print "Please Re-enter information"


        def print_a_thank_you(name, donation_amount):
            print "Dear %s , Thank you so much for the donation of $ %s , We really appreciate it. This will provide necessary funds to our core operations. This donation should be tax deductable. Please consult an account specialist for further information. Sincerely - Rich Green" % (name, donation_amount)

        # Return to menu

        Create_report():
        '''Print Donor list with sum of donor amounts . Sort by first donation amount'''


        #### Here we will generate a table of averages, sums, frequency , and sort by donation number
        #### Still try to resolve how to do this but know it invloves iterating through the key/value ###pairs:

        results_sum = {}
        results_avg = {}

        # sum
        for key, value in donor_info.iteritems():
        try:

            results_sum[key] = sum(value)
        except TypeError:
            pass

        # average
            for key, value in donor_info.iteritems():
        try:

            results_avg[key] = sum(value)/len(value)
        except TypeError:
            pass

        # To do :Generate a frequency table

        # To print the out put in a proper formatted table I will likely use
        #pretty table

        # Menu definition
        menu_actions = {
            'main_menu': main_menu,
            '1': send_a_thankyou(),
            '2': Create_report(),
            '9': back,
            '0': exit,
        }

# Main Program
if __name__ == "__main__":
    # Launch main menu
    main_menu()
